swagger: '2.0'
info: {title: FlowFunctions, description: '', version: '1.0'}
host: flowfunctions.herokuapp.com
basePath: /
schemes: [https]
produces: [application/json]
paths:
  /strings/replaceAll: {}
  /strings/test: {}
  /regex/replace/:
    post:
      responses:
        default:
          description: New Value
          schema: {type: string, description: New Value from the regex replacer, title: New
              Value}
      summary: Replace by Regex
      description: Tentativa de usar json
      operationId: RepalceByJson
      parameters:
      - name: body
        in: body
        required: true
        schema:
          type: object
          properties:
            receivedText: {type: string, description: receivedText, title: Texto base}
            regex: {type: string, description: regex, title: Expressão regular}
            replacement: {type: string, description: replacement, title: Trocar por}
          required: [receivedText, regex, replacement]
  /regex/matchall:
    post:
      responses:
        default:
          description: default
          schema: 
            type: object 
            description: Values from match all
            title: Values
            properties: 
              values: {type: array}
      summary: Match All
      description: Match all regex groups from a string an returns an array. If all
        the elements from the string is a number, returns an array of numbers
      operationId: MatchAll
      parameters:
      - name: body
        in: body
        required: true
        schema:
          type: object
          properties:
            receivedText: {type: string, description: receivedText, title: Text}
            regex: {type: string, description: regex, title: RegExp}
          required: [receivedText, regex]
  /arr/excludeMatch:
    post:
      responses:
        default:
          description: default
          schema: 
            type: array 
            description: The excluded match
            title: Exclude Matches
      summary: Exclude Match from Array
      description: Creates a new array of the values from A array that doesnt exist on array B, it can be either an array of primitive values or an array of objects, if it's an array of objects, matchKey should be specified
      operationId: MatchAll
      parameters:
      - name: body
        in: body
        required: true
        schema:
          type: object
          properties:
            arr1: {type: array, description: First Array to be compared, title: First Array}
            arr2: {type: array, description: Second array to take the values from, title: Second Array}
            matchKey: {type: string, description: "If the array is an array of objects, the key of the object to be compared in two arrays", title: Match Key}
          required: [arr1, arr2]
  /regex/test:
    post:
      responses:
        default:
          description: Test if an regex is valid
          schema: {type: boolean, description: Boolean value telling if test is true of false, title: Test}
      summary: Test Regex
      description: Text an regular expression
      operationId: TestRegex
      parameters:
      - name: body
        in: body
        required: true
        schema:
          type: object
          properties:
            text: {type: string, description: text, title: Text}
            regex: {type: string, description: regex, title: RegExp}
          required: [text, regex]
    
      deprecated: false
definitions:
  content:
    type: object
    properties:
      receivedText: {type: string, description: Texto base, title: Texto}
      regex: {type: string, title: RegExp, description: Expressão regular de busca
          (Com ou sem / /)}
      replacement: {type: string, title: Substituir-por, description: Texto de substituição}
parameters: {}
responses: {}
securityDefinitions: {}
security: []
tags: []
